<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- Packages to be scanned for beans in parent context, i.e., everything 
		except controllers -->
	<context:component-scan base-package="com.jsrk.backup.server">
		<context:exclude-filter type="regex"
			expression="com\.jsrk\.backup\.server\.controller.*" />
		<context:exclude-filter type="regex"
			expression="com\.jsrk\.backup\.server\.aspect.*" />
	</context:component-scan>

	<!-- Loading properties from properties file -->
	<context:property-placeholder
		location="/app-resources/jdbc.properties,/app-resources/messages.properties,/app-resources/hibernate.properties" />

	<!-- DataSource bean to connect with MySQL server using JDBC driver -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- SessionFactory bean to create and manage sessions -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/hibernate.cfg.xml" />
	</bean>

	<!-- TransactionManager bean to manage transactions -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- TransactionalAdvice to specify what should happen for transactions 
		with [PATTERN] -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- All methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" />
			<!-- Other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- Ensures that the above transactionAdvice runs for any execution of 
		an operation defined by the Service layer -->
	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(public * com.jsrk.backup.server.data.service.impl.*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceOperation" />
	</aop:config>

	<!-- Enable web security -->
	<security:http>
		<security:intercept-url pattern="/show_register"
			access="isAnonymous()" />
		<security:intercept-url pattern="/insert_user"
			access="isAnonymous()" />
		<security:intercept-url pattern="/show_login"
			access="isAnonymous()" />
		<security:intercept-url pattern="/**"
			access="hasRole('USER')" />
		<security:form-login login-page="/show_login" />
		<security:logout />
	</security:http>

	<!-- JDBC Authentication -->
	<security:authentication-manager>
		<security:authentication-provider
			ref="myAuthenticationProvider" />
	</security:authentication-manager>

</beans>